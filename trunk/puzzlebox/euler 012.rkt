
;; Grazl.
;; Public domain.

;; The sequence of triangle numbers is generated by adding 
;; the natural numbers. So the 7^(th) triangle number would 
;; be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 

;; The first ten terms would be:
;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

;; Let us list the factors of the first seven triangle numbers:
;;  1: 1
;;  3: 1,3
;;  6: 1,2,3,6
;; 10: 1,2,5,10
;; 15: 1,3,5,15
;; 21: 1,3,7,21
;; 28: 1,2,4,7,14,28

;; We can see that 28 is the first triangle number 
;; to have over five divisors. What is the value of the 
;; first triangle number to have over five hundred divisors?
#lang racket

(define (get-divisors num)

  ;; Hold the current divisor, last one used and a counter
  ;; and multiply result on the fly using the divisor function.
  (let loop ((num num) (result 1) (div 2) (last 2) (count 0))

    ;; Update the result
    ;; with the last counter value.
    (if (= num 1)
      (* result (+ count 1))
     
      ;; It is a divisor, check it was the last used.
      ;; Increment the counter if so, otherwise, update result.
      (if (= 0 (remainder num div))
        (if (eq? div last) 
          (loop (quotient num div) result div last (+ count 1))
          (loop (quotient num div) (* result (+ count 1)) div div 1))

        ;; Not a divisor, continue with the next.
        (loop num result (+ 1 div) last count)))))

(define (triangle n) (/ (* n (+ n 1)) 2))

(printf "Euler 012: ~a \n"
  (let loop ([n 1])
    (let ([current (triangle n)])
      (if (<= 500 (get-divisors current))
        (triangle n)
      (loop (+ n 1))))))

